import 'package:bloc/bloc.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:projectcar/present/setting/map/notification_service.dart';
import '../../../data/drift.dart';

part 'mileage_bloc.freezed.dart';
part 'mileage_event.dart';
part 'mileage_state.dart';

class MileageBloc extends Bloc<MileageEvent, MileageState> {
  final AppDatabase database;

  MileageBloc({required this.database}) : super(const MileageState.initial()) {
    on<_LoadMileage>(_onLoadMileage);
    on<_IncreaseMileage>(_onIncreaseMileage); // üëà –¥–æ–±–∞–≤–∏–ª–∏
  }

  Future<void> _onLoadMileage(_LoadMileage event, Emitter<MileageState> emit) async {
    emit(const MileageState.loading());
    try {
      final mileage = await database.getCurrentMileage(event.carId);
      emit(MileageState.loaded(currentMileage: mileage));
    } catch (e) {
      emit(MileageState.error(error: e));
    }
  }

  Future<void> _onIncreaseMileage(_IncreaseMileage event, Emitter<MileageState> emit) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥
      final oldMileage = await database.getCurrentMileage(event.carId);
      final newMileage = oldMileage + event.by;

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
      await database.updateMileage(event.carId, newMileage);

      emit(MileageState.loaded(currentMileage: newMileage));

      // üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º 10‚ÄØ000 –∫–º
      if ((newMileage ~/ 10000) > (oldMileage ~/ 10000)) {
        await NotificationService.showNotification(
          title: '–ü–æ—Ä–∞ —Å–¥–µ–ª–∞—Ç—å –¢–û',
          body: '–ü—Ä–æ–±–µ–≥: $newMileage –∫–º. –ó–∞–µ–¥—å –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å.',
        );
      }
    } catch (e) {
      emit(MileageState.error(error: e));
    }
  }
}
